(declare-sort Pkg) ; A package
(define-sort Time () Int) ; The installation step

(declare-fun installed (Pkg Time) Bool) ; Pkg is installed at time t

; For all of the dependencies, at least one has to be installed
(define-fun-rec depends-sat ((ps (List Pkg)) (t Time)) Bool
  (ite (= nil ps) false (or (and (installed (head ps) t) (installed (head ps) (- t 1))) (depends-sat (tail ps) t))))

(define-fun depends ((p Pkg) (ps (List Pkg))) Bool
  (forall ((t Time)) (=> (installed p t) (depends-sat ps t))))

(define-fun confl ((p1 Pkg) (p2 Pkg)) Bool
  (forall ((t Time)) (and (=> (and (installed p1 t) (installed p2 (- t 2)))
                              (not (or (installed p2 (- t 1)) (installed p2 t))))
                          (=> (and (installed p2 t) (installed p1 (- t 2)))
                              (not (or (installed p1 (- t 1)) (installed p1 t)))))))

; bootstrapping
(declare-const a Pkg)
(declare-const b Pkg)
(declare-const c Pkg)
(declare-const d Pkg)
(declare-const e Pkg)
(declare-const f Pkg)
(declare-const g Pkg)
(declare-const h Pkg)

(declare-const t-final Time)

(assert (depends h (insert g nil)))
(assert (depends g (insert f nil)))
(assert (depends f (insert e nil)))
(assert (depends e (insert d nil)))
(assert (depends d (insert b (insert c nil))))
(assert (depends c (insert b nil)))
(assert (depends b (insert c (insert a nil))))
(assert (confl d a))
(assert (forall ((t Time)) (=> (< t 0) (not (installed a t)))))

(assert (installed a 0))
(assert (not (installed b 0)))
(assert (not (installed c 0)))
(assert (not (installed d 0)))
(assert (installed h t-final))

(assert (> t-final 0))

(minimize t-final)
(check-sat)
; (get-model)

; (define-fun-rec out ((p Pkg) (t Time)) (List Bool) (ite (< t 0) (as nil (List Bool)) (insert (eval (installed p t)) (out p (- t 1)))))

(echo "a")
(eval (installed a 0))
(eval (installed a 1))
(eval (installed a 2))
(eval (installed a 3))
(eval (installed a 4))
(eval (installed a 5))
(eval (installed a 6))
(eval (installed a 7))
(eval (installed a 8))
(eval (installed a 9))

(echo "b")
(eval (installed b 0))
(eval (installed b 1))
(eval (installed b 2))
(eval (installed b 3))
(eval (installed b 4))
(eval (installed b 5))
(eval (installed b 6))
(eval (installed b 7))
(eval (installed b 8))
(eval (installed b 9))

(echo "c")
(eval (installed c 0))
(eval (installed c 1))
(eval (installed c 2))
(eval (installed c 3))
(eval (installed c 4))
(eval (installed c 5))
(eval (installed c 6))
(eval (installed c 7))
(eval (installed c 8))
(eval (installed c 9))

(echo "d")
(eval (installed d 0))
(eval (installed d 1))
(eval (installed d 2))
(eval (installed d 3))
(eval (installed d 4))
(eval (installed d 5))
(eval (installed d 6))
(eval (installed d 7))
(eval (installed d 8))
(eval (installed d 9))

(echo "e")
(eval (installed e 0))
(eval (installed e 1))
(eval (installed e 2))
(eval (installed e 3))
(eval (installed e 4))
(eval (installed e 5))
(eval (installed e 6))
(eval (installed e 7))
(eval (installed e 8))
(eval (installed e 9))

(echo "f")
(eval (installed f 0))
(eval (installed f 1))
(eval (installed f 2))
(eval (installed f 3))
(eval (installed f 4))
(eval (installed f 5))
(eval (installed f 6))
(eval (installed f 7))
(eval (installed f 8))
(eval (installed f 9))

(echo "g")
(eval (installed g 0))
(eval (installed g 1))
(eval (installed g 2))
(eval (installed g 3))
(eval (installed g 4))
(eval (installed g 5))
(eval (installed g 6))
(eval (installed g 7))
(eval (installed g 8))
(eval (installed g 9))

(echo "h")
(eval (installed h 0))
(eval (installed h 1))
(eval (installed h 2))
(eval (installed h 3))
(eval (installed h 4))
(eval (installed h 5))
(eval (installed h 6))
(eval (installed h 7))
(eval (installed h 8))
(eval (installed h 9))

; (declare-const a Pkg)
; (declare-const b Pkg)
; (assert (confl a b))
; (assert (installed b 0))
; (assert (installed a 1))
; (check-sat)
; (eval (installed b 1))
